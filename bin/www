#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../server');
var debug = require('debug')('api:server');
var http = require('http');
var server = require('http').createServer(app);
var io = require('socket.io')(server);
var fs = require('fs');
var url = require('url');
var path = '/stomp';
var mime = require('mime');
 // var allowedOrigins = "http://localhost:*http://localhost:3000";

// trying this trick to correct the Cors issue from: https://github.com/socketio/socket.io/issues/2294
 // var sio_server = io(http.server,{
 //   origins: allowedOrigins,
 //   path: path
 // });
/**
 * Get port from environment and store in Express.
 */






 /**
 * Create HTTP server.
 */

 //////////////////////////////
 ///////// Got this static server code below from http://danielnill.com/nodejs-tutorial-with-socketio/
 //////////////////////////////


// var httpServer = http.createServer(function(request, response){
//          var path = url.parse(request.url).pathname;
//
//          switch(path){
//              case '/':
//                  response.statusCode = 200; ({'Content-Type': 'text/html'});
//                  response.write('hello world');
//                  response.end();
//                  break;
//              case '/socket.html':
//                  fs.readFile(__dirname + path, function(error, data){
//                      if (error){
//                          response.statusCode = 404;
//                          response.write("ooops this doesn't exist - 404");
//                          response.end();
//                      }
//                      else{
//                          response.statusCode = 200;
//                          response.setHeader('Access-Control-Allow-Origin', '*');
//                          response.setHeader('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Acccept')
//                          response.write(data, "utf8");
//                          response.end();
//                      }
//                  });
//                  break;
//              default:
//                  response.statusCode = 404;
//                  response.write("Umm this doesn't exist - 404");
//                  response.end();
//                  break;
//          }
//      });




// var server = http.createServer(function(request, response){
//
//   var pathname = url.parse(request.url).pathname;
//   if(pathname === "/") pathname = "index.html";
//   var filename = path.join(process.cwd(),'public', pathname);
//
//   fs.exists(filename, function(exists){
//     if(!exists) {
//       response.writeHead(404, {"Content-Type": "text/html"});
//       response.write("404 Not Found Hmmm?");
//       response.end();
//       return;
//     }
//
//     response.writeHead(200, {'Content-Type': mime.lookup(filename)});
//     fs.createReadStream(filename,{
//       'flags': 'r',
//       'encoding': 'binary',
//       'mode' : 0666,
//       'bufferSize': 4 * 1024
//     }).addListener("data", function(chunk){
//       response.write(chunk, 'binary');
//     }).addListener("close", function(){
//       response.end();
//     });
//   });
// });


//  server.listen(3000, function(){
//    console.log('listening on *:3000');
//  });

//load and attach socket.io to http server
// var webSocket = io.listen(server,function(){
//   console.log('listening on *:3000');
// });

// For hosting on Heroku
// if(process.env.NODE_ENV == 'production'){
// webSocket.configure(function () {
//   webSocket.set("transports", ["xhr-polling"]);
//   webSocket.set("polling duration", 10);
//   // webSocket.set('log level', 1)
//   });
// }

var connectedUsers = {};

io.on('connection', function(socket){
  console.log('socket connected')

  socket.on('join', function(user, sendKey){
    user.key = Date.now();
    socket.set('userkey', user.key);
    sendKey(user.key);

    connectedUsers[user.key] = user;
    socket.broadcast.emit("user connected", user);
  });

  socket.on('message', function(msg){
    socket.get('userkey', function(err, key){
      var user = connectedUsers[key];
      if(user){
        var data = {
        key: key,
        sender: user.name,
        message: msg
      };
      socket.broadcast.emit('new chat msg', data);
    }
  });
});

socket.on("send location", function(data) {
   socket.get('userkey', function(err, key) {
     var user = connectedUsers[key];
     if(user) {
       user.lat = data.lat;
       user.lng = data.lng;
       data.name = user.name
       data.key = key;
       socket.broadcast.emit("location update", data);
     }
   });
 });

 socket.on("request locations", function(sendData) {
   sendData(connectedUsers);
 });

 socket.on('disconnect', function() {
   socket.get('userkey', function(err, key) {
     var userInfo = connectedUsers[key];
     if(userInfo) {
       console.log('User ', userInfo.username, ' has disconnected. Key = ', key);
       delete connectedUsers[key];
       socket.broadcast.emit("user disconnected", key);
     }
   });
 });
 });

// Open a port for the server to listen to.
var port = normalizePort (process.env.PORT || '3000');
app.set('port', port);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
  console.log('listening here')
server.on('error', onError);
server.on('listening', onListening);
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port))
    // named pipe
    return val;
    if (port >= 0)
      // port number
      return port;
      return false;
  }

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen')
    throw error;
    var bind = (typeof port === 'string')
    ? 'Pipe ' + port
    : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
      case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
      default:
      throw error;



  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = (typeof addr === 'string')
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
